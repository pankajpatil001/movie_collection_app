from django.db import transaction
from collection.models import RequestCounter

class RequestCounterMiddleware:
    """
    Middleware to count the incoming requests.

    This middleware intercepts incoming requests and increments the request counter
    stored in the database. It uses a transaction to ensure that the counter is
    incremented atomically.

    Attributes:
        get_response (callable): The next middleware or view function in the chain.
    """
    def __init__(self, get_response):
        """
        Initialize the middleware.

        Parameters:
            get_response (callable): The next middleware or view function in the chain.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Call method to process incoming requests.

        This method is called for each incoming request. It intercepts the request,
        increments the request counter, and then passes the request to the next middleware
        or view function in the chain.

        Parameters:
            request (HttpRequest): The incoming HTTP request.

        Returns:
            HttpResponse: The HTTP response generated by the next middleware or view function.
        """
        response = self.get_response(request)
        return response

    def process_view(self, request, view_func, view_args, view_kwargs):
        """
        Process the view function.

        This method is called just before the view function is called. It increments
        the request counter stored in the database using a transaction to ensure atomicity.

        Parameters:
            request (HttpRequest): The incoming HTTP request.
            view_func (callable): The view function to be called.
            view_args (tuple): The arguments passed to the view function.
            view_kwargs (dict): The keyword arguments passed to the view function.
        """
        with transaction.atomic():
            counter, created = RequestCounter.objects.select_for_update().get_or_create(pk=1)
            counter.count += 1
            counter.save()